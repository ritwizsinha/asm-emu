/*****************************************************************************
TITLE: Claims																																
AUTHOR:   RITWIZ SINHA
Declaration of Authorship
This txt file, claims.txt, is part of the assignment of CS321 at the 
department of Computer Science and Engg, IIT Patna . 
*****************************************************************************/
**************NOTE: The report is provided in the readme at 
Files:
==========
*All the files i submitted, asm.c and emu.c and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the 8 test examples has also been uploaded. The test files are in folder test1 to test8, alongwidth test_bubble.
Each file is included with the executable file(.o), the listing file (.list) and the warning file. If there are errors there is also the error log file.

*My c programs did not show any errors and warnings when i compiled it with
1. gcc -std=c89 -pedantic 
2. gcc -std=c89 -pedantic -W -Wall -Wpointer-arith 
(PS: Did not use these two flags because there are some const char * to char * conversions and I have not prototyped all functions 
-Wwrite-strings -Wstrict-prototypes)

*Programs are compilable with gcc asm.c -o asm


=============================
Program format and structure:
=============================
1. The assembler:

    - Labels, mnemonics and operands all are stored in array of structures.
    - I have stored the file internally in the first parse and then performed the required operations.
    - Detects all kinds of label erros.
    - consistent and sensible formatting with sensible program structure. 
    - sensible variable, function & type names with explanatory comments.
		- advanced listing file.
		- assembles test programs.
	- implements and demonstrates the instruction SET.
    - The source  of both emulator and assembler is uploaded to github on the link (https://github.com/ritwizsinha/asm-emu)
    - The code is written in ISO C89
    - Every function has comments except for self-explanatory ones
    - Sensible variable, function & type names with explanatory comments are given
    - I have first read the file into a consistent internal form and then performed the operations.
    - I have diagonosed label errors like missing label, repeated label, bogus labels.
    - I have also given appropriate warnings like unused label, redundant label.
    - I have created an advanced listing file the listing file is of the following format:
        Address          MachineCode            Instruction mnemonics
    - I have also created a table for instruction names and operands and an array of structures has been used to store them.
    - I have correctly assembled the test programs and have also the attached the listing file, the error and warning files and the machine code file
    - I have also included additional test programs named from test5.asm
    - I have implemented set correctly and the example can be seen from the test3.asm file
    - I have not implemented the bubble sort myself but it correctly compiles and and runs the program without any errors.

=============================
Testing:
=============================

1. The assembler:

I have tested  9 examplles as shown below. The errors only occurred in the file test2.asm, and test5.asm and 
the program immediately stopped on the second pass. 

The other files were without any errors and the created listing file, machine code file and the warning file is attached along.


1)
#Input: asm ../test1/test1.asm    - I am currently implementing the emulator for the assembler.
#Output: 
a. test1.list
b. test1.warn (without warnings)
c. test1.o

2)
#Input:asm ../test2/test2.asm
#Output: 
b test2.log(lots of error messages)

error messages:
Error Line: 4, Label already defined above
Error Line: 9, Unrecognized character found
Error Line: 11, Bogus mnemonic
Error Line: 12, Bogus mnemonic
Error Line: 10, Bogus Label found
Error Line: 5, Operand is not defined
Error Line: 6, Operand is not defined
Error Line: 7, Operand required
Error Line: 8, Operand not required


3)
#Input:asm ../test3/test3.asm
#Output: 
a. test3.list
b. test3.warn (without warnings)
c. test3.o


4)
#Input:asm ../test4/test4.asm
#Output: 
a. test4.list
b. test4.warn (without any warning messages)
c. test4.o

5)
#Input:asm ../test5/test5.asm
#Output: 
b test5.log(lots of error messages)

Error Line: 6, Label already defined above
Error Line: 8, Unrecognized character found
Error Line: 10, Bogus mnemonic
Error Line: 11, Bogus mnemonic
Error Line: 14, Found more than one colon on a line
Error Line: 7, Bogus Label found
Error Line: 9, Label name cannot be a mnemonic name
Error Line: 3, Operand is not defined
Error Line: 4, Operand is not defined
Error Line: 12, Operand required
Error Line: 13, Operand not required
Error Line: 17, SET should only have a numeric value
Error Line: 18, data should only have a numeric value


6)
#Input:asm ../test6/test6.asm
#Output: 
a. test6.list
b. test6.warn (without any warning messages)
c. test6.o

7)
#Input:asm ../test7/test7.asm
#Output: 
a. test7.list
b. test7.warn (without any warning messages)
c. test7.o

8)
#Input:asm ../test8/test8.asm
#Output: 
a. test8.list
b. test8.warn (with many warning messages)
Warning Line: 7, Overflow, data more than 32 bits
Warning Line: 10, Overflow, offset/value more than 24 bits
Warning Line: 12, Overflow, data more than 32 bits
Warning Line: 16, Overflow, data more than 32 bits
Warning Line: 17, Overflow, data more than 32 bits
Warning Line: 2, Invalid label usage, Loading a code address
Warning Line: 4, Useless label
Warning Line: 6, Infinite loop expected
Warning Line: 7, Unused Label
Warning Line: 11, Unused Label
Warning Line: 12, Unused Label
Warning Line: 13, Unused Label
Warning Line: 14, Unused Label
Warning Line: 15, Unused Label
Warning Line: 16, Unused Label
Warning Line: 17, Unused Label
Warning Line: 18, Unused Label
Warning Line: 19, Unused Label
Warning Line: 20, Unused Label
Warning Line: 7, All data should be defined after halt, otherwise may lead to ambigous results
Warning Line: 0, Multiple HALTS have no effect

c. test8.o

9) 
#Input asm ../test_bubble/bubble.asm
#Output: 
a. bubbble.list
b. bubbble.warn (without any warning messages)
c. bubbble.o